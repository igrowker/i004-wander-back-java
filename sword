[1mdiff --git a/src/main/java/com/igrowker/wander/controller/AuthController.java b/src/main/java/com/igrowker/wander/controller/AuthController.java[m
[1mindex 67a361e..9869119 100644[m
[1m--- a/src/main/java/com/igrowker/wander/controller/AuthController.java[m
[1m+++ b/src/main/java/com/igrowker/wander/controller/AuthController.java[m
[36m@@ -8,6 +8,7 @@[m [mimport com.igrowker.wander.security.JwtService;[m
 import com.igrowker.wander.service.AuthService;[m
 import io.swagger.v3.oas.annotations.Operation;[m
 import jakarta.validation.Valid;[m
[32m+[m[32mimport java.util.Map;[m
 import org.springframework.beans.factory.annotation.Autowired;[m
 import org.springframework.http.HttpStatus;[m
 import org.springframework.http.ResponseEntity;[m
[36m@@ -51,5 +52,18 @@[m [mpublic class AuthController {[m
         String response = authService.logout(authorizationHeader);[m
         return ResponseEntity.ok(response);[m
     }[m
[32m+[m[41m    [m
[32m+[m[32m    @PostMapping("/forgot-password")[m
[32m+[m[32m    public ResponseEntity<String> forgotPassword(@RequestBody Map<String, String> request) {[m
[32m+[m[32m        authService.sendForgotPasswordEmail(request.get("email"));[m
[32m+[m[32m        return ResponseEntity.ok("Correo enviado si el email existe en nuestro sistema");[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @PostMapping("/reset-password")[m
[32m+[m[32m    public ResponseEntity<String> resetPassword(@RequestBody Map<String, String> request) {[m
[32m+[m[32m        authService.resetPassword(request.get("token"), request.get("newPassword"));[m
[32m+[m[32m        return ResponseEntity.ok("Contrase√±a restablecida con √©xito");[m
[32m+[m[32m    }[m
 }[m
 [m
[41m+[m
[1mdiff --git a/src/main/java/com/igrowker/wander/dto/user/ForgotPasswordRequestDto.java b/src/main/java/com/igrowker/wander/dto/user/ForgotPasswordRequestDto.java[m
[1mnew file mode 100644[m
[1mindex 0000000..c082ea7[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/igrowker/wander/dto/user/ForgotPasswordRequestDto.java[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m
[32m+[m[32mpackage com.igrowker.wander.dto.user;[m
[32m+[m
[32m+[m[32mimport jakarta.validation.constraints.Email;[m
[32m+[m[32mimport jakarta.validation.constraints.NotBlank;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32mpublic class ForgotPasswordRequestDto {[m
[32m+[m
[32m+[m[32m    @NotBlank(message = "El email es obligatorio y no puede estar vac√≠o.")[m
[32m+[m[32m    @Email(message = "El formato del email no es v√°lido.")[m
[32m+[m[32m    private String email;[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/igrowker/wander/entity/User.java b/src/main/java/com/igrowker/wander/entity/User.java[m
[1mindex 7c7d6ac..5cd20e8 100644[m
[1m--- a/src/main/java/com/igrowker/wander/entity/User.java[m
[1m+++ b/src/main/java/com/igrowker/wander/entity/User.java[m
[36m@@ -55,6 +55,9 @@[m [mpublic class User implements UserDetails {[m
     private String verificationCode;[m
 [m
     private LocalDateTime verificationCodeExpiresAt;[m
[32m+[m[41m    [m
[32m+[m[32m    private String passwordResetToken;[m
[32m+[m[32m    private LocalDateTime passwordResetTokenExpiresAt;[m
 [m
     @Override[m
     public Collection<? extends GrantedAuthority> getAuthorities() {[m
[1mdiff --git a/src/main/java/com/igrowker/wander/security/JwtService.java b/src/main/java/com/igrowker/wander/security/JwtService.java[m
[1mindex 9a28749..3c2064c 100644[m
[1m--- a/src/main/java/com/igrowker/wander/security/JwtService.java[m
[1m+++ b/src/main/java/com/igrowker/wander/security/JwtService.java[m
[36m@@ -25,6 +25,9 @@[m [mpublic class JwtService {[m
 [m
     @Value("${jwt.expiration}")[m
     private long jwtExpiration;[m
[32m+[m[41m    [m
[32m+[m[32m    @Value("${jwt.password-reset.expiration}")[m
[32m+[m[32m    private long passwordResetExpiration;[m
 [m
     public String extractEmail(String token) {[m
         return extractClaim(token, Claims::getSubject);[m
[36m@@ -46,6 +49,18 @@[m [mpublic class JwtService {[m
     public long getExpirationTime() {[m
         return jwtExpiration;[m
     }[m
[32m+[m[41m    [m
[32m+[m[32m     public String generatePasswordResetToken(String email) {[m
[32m+[m[32m        Map<String, Object> claims = new HashMap<>();[m
[32m+[m[32m        claims.put("purpose", "password_reset");[m
[32m+[m[32m        return buildToken(claims, email, passwordResetExpiration);[m[41m [m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public boolean isPasswordResetTokenValid(String token) {[m
[32m+[m[32m        Claims claims = extractAllClaims(token);[m
[32m+[m[32m        String purpose = (String) claims.get("purpose");[m
[32m+[m[32m        return "password_reset".equals(purpose) && !isTokenExpired(token);[m
[32m+[m[32m    }[m
 [m
     private String buildToken([m
             Map<String, Object> extraClaims,[m
[36m@@ -61,7 +76,22 @@[m [mpublic class JwtService {[m
                 .signWith(getSignInKey(), SignatureAlgorithm.HS256)[m
                 .compact();[m
     }[m
[31m-[m
[32m+[m[41m    [m
[32m+[m[32m    private String buildToken([m
[32m+[m[32m            Map<String, Object> extraClaims,[m
[32m+[m[32m            String email,[m
[32m+[m[32m            long expiration[m
[32m+[m[32m    ) {[m
[32m+[m[32m        return Jwts[m
[32m+[m[32m                .builder()[m
[32m+[m[32m                .setClaims(extraClaims)[m
[32m+[m[32m                .setSubject(email) // Aqu√≠ se usa el email directamente como subject[m
[32m+[m[32m                .setIssuedAt(new Date(System.currentTimeMillis()))[m
[32m+[m[32m                .setExpiration(new Date(System.currentTimeMillis() + expiration))[m
[32m+[m[32m                .signWith(getSignInKey(), SignatureAlgorithm.HS256)[m
[32m+[m[32m                .compact();[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
     public boolean isTokenValid(String token, UserDetails userDetails) {[m
         final String email = extractEmail(token);[m
         return (email.equals(userDetails.getUsername())) && !isTokenExpired(token);[m
[36m@@ -92,5 +122,5 @@[m [mpublic class JwtService {[m
 [m
     private Key getSignInKey() {[m
         return Keys.hmacShaKeyFor(Base64.getDecoder().decode(secretKey));[m
[31m-    }[m
[32m+[m[32m    }[m[41m [m
 }[m
[1mdiff --git a/src/main/java/com/igrowker/wander/service/AuthService.java b/src/main/java/com/igrowker/wander/service/AuthService.java[m
[1mindex 2d9c395..830339c 100644[m
[1m--- a/src/main/java/com/igrowker/wander/service/AuthService.java[m
[1m+++ b/src/main/java/com/igrowker/wander/service/AuthService.java[m
[36m@@ -12,5 +12,9 @@[m [mpublic interface AuthService {[m
     LoginResponse authenticateUser(LoginRequest loginRequest);[m
 [m
     String logout(String authorizationHeader);[m
[32m+[m[41m    [m
[32m+[m[32m    void sendForgotPasswordEmail(String email);[m
[32m+[m
[32m+[m[32m    void resetPassword(String token, String newPassword);[m
 [m
 }[m
[1mdiff --git a/src/main/java/com/igrowker/wander/serviceimpl/AuthServiceImpl.java b/src/main/java/com/igrowker/wander/serviceimpl/AuthServiceImpl.java[m
[1mindex f8726d0..8d3a839 100644[m
[1m--- a/src/main/java/com/igrowker/wander/serviceimpl/AuthServiceImpl.java[m
[1m+++ b/src/main/java/com/igrowker/wander/serviceimpl/AuthServiceImpl.java[m
[36m@@ -47,7 +47,7 @@[m [mpublic class AuthServiceImpl implements AuthService {[m
     @Autowired[m
     private EmailService emailService;[m
 [m
[31m-[m
[32m+[m[32m    @Override[m
     @Transactional[m
     public ResponseUserDto registerUser(@Valid RegisterUserDto userDto) {[m
         if (userRepository.existsByEmail(userDto.getEmail())) {[m
[36m@@ -84,6 +84,7 @@[m [mpublic class AuthServiceImpl implements AuthService {[m
     }[m
 [m
     @Transactional[m
[32m+[m[32m    @Override[m
     public LoginResponse authenticateUser(@Valid LoginRequest loginRequest) {[m
         User user = userRepository.findByEmail(loginRequest.getEmail()).orElseThrow([m
                 () -> new ResourceNotFoundException("Usuario no encontrado."));[m
[36m@@ -112,19 +113,20 @@[m [mpublic class AuthServiceImpl implements AuthService {[m
                 .build();[m
     }[m
 [m
[32m+[m[32m    @Override[m
     public String logout(String authorizationHeader) {[m
         if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {[m
             throw new InvalidJwtException("Invalid Authorization");[m
         }[m
 [m
         try {[m
[31m-            // Extract the token from the header[m
[32m+[m[41m            [m
             String token = authorizationHeader.substring(7);[m
 [m
[31m-            // Validate the token using JwtService[m
[32m+[m[41m            [m
             jwtService.extractAllClaims(token); // Throws an exception if the token is invalid[m
 [m
[31m-            // Invalidate the token by storing it in the revoked tokens repository[m
[32m+[m[41m            [m
             invalidateToken(token, jwtService.extractExpiration(token));[m
 [m
             // Success response[m
[36m@@ -209,6 +211,58 @@[m [mpublic class AuthServiceImpl implements AuthService {[m
         int code = random.nextInt(900000) + 100000;[m
         return String.valueOf(code);[m
     }[m
[32m+[m[41m    [m
[32m+[m[41m    [m
[32m+[m[32m@Transactional[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public void sendForgotPasswordEmail(String email) {[m
[32m+[m[32m        User user = userRepository.findByEmail(email)[m
[32m+[m[32m                .orElseThrow(() -> new ResourceNotFoundException("Usuario no encontrado"));[m
[32m+[m
[32m+[m[32m        // Generar un token de restablecimiento de contrase√±a[m
[32m+[m[32m        String resetToken = jwtService.generatePasswordResetToken(user.getEmail());[m
[32m+[m
[32m+[m[32m        // Enviar el correo con el enlace de restablecimiento[m
[32m+[m[32m        sendPasswordResetEmail(user, resetToken);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Restablecer la contrase√±a[m
[32m+[m[32m    @Transactional[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public void resetPassword(String token, String newPassword) {[m
[32m+[m[32m        // Validar el token de restablecimiento[m
[32m+[m[32m        if (!jwtService.isPasswordResetTokenValid(token)) {[m
[32m+[m[32m            throw new InvalidJwtException("Token inv√°lido o expirado");[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // Extraer el email del token[m
[32m+[m[32m        String email = jwtService.extractEmail(token);[m
[32m+[m
[32m+[m[32m        // Buscar al usuario por email[m
[32m+[m[32m        User user = userRepository.findByEmail(email)[m
[32m+[m[32m                .orElseThrow(() -> new ResourceNotFoundException("Usuario no encontrado"));[m
[32m+[m
[32m+[m[32m        // Actualizar la contrase√±a[m
[32m+[m[32m        user.setPassword(passwordEncoder.encode(newPassword));[m
[32m+[m[32m        userRepository.save(user);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Enviar correo electr√≥nico de recuperaci√≥n[m
[32m+[m[32m    private void sendPasswordResetEmail(User user, String resetToken) {[m
[32m+[m[32m        String subject = "Restablecimiento de contrase√±a";[m
[32m+[m[32m        String resetUrl = "http://your-app-url.com/reset-password?token=" + resetToken;[m
 [m
[32m+[m[32m        String htmlMessage = "<html><body>"[m
[32m+[m[32m                + "<h3>Solicitud de restablecimiento de contrase√±a</h3>"[m
[32m+[m[32m                + "<p>Haz clic en el enlace a continuaci√≥n para restablecer tu contrase√±a:</p>"[m
[32m+[m[32m                + "<a href='" + resetUrl + "'>Restablecer contrase√±a</a>"[m
[32m+[m[32m                + "</body></html>";[m
[32m+[m
[32m+[m[32m        try {[m
[32m+[m[32m            emailService.sendVerificationEmail(user.getEmail(), subject, htmlMessage);[m
[32m+[m[32m        } catch (MessagingException e) {[m
[32m+[m[32m            throw new RuntimeException("Error enviando email: " + e.getMessage());[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
 [m
 }[m
[1mdiff --git a/src/main/resources/application.properties b/src/main/resources/application.properties[m
[1mindex f751469..c3064ab 100644[m
[1m--- a/src/main/resources/application.properties[m
[1m+++ b/src/main/resources/application.properties[m
[36m@@ -10,6 +10,7 @@[m [mlogging.level.org.springframework.data.mongodb=DEBUG[m
 # Spring Security[m
 jwt.secret=${JWT_SECRET_KEY}[m
 jwt.expiration=3600000[m
[32m+[m[32mjwt.password-reset.expiration=900000[m
 [m
 # Email configuration[m
 spring.mail.host=${MAIL_HOST}[m
